{"ast":null,"code":"import _slicedToArray from\"/var/www/html/ami-travel/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React from'react';const useWindowSize=()=>{const isClient=typeof window==='object';const getSize=React.useCallback(()=>({width:isClient?window.innerWidth:undefined,height:isClient?window.innerHeight:undefined}),[isClient]);const _React$useState=React.useState(getSize),_React$useState2=_slicedToArray(_React$useState,2),size=_React$useState2[0],setSize=_React$useState2[1];React.useEffect(()=>{if(!isClient){return false;}const onHandleResize=()=>{setSize(getSize);};window.addEventListener('resize',onHandleResize);return()=>window.removeEventListener('resize',onHandleResize);},[getSize,isClient]);return size;};export default useWindowSize;","map":{"version":3,"sources":["/var/www/html/ami-travel/src/library/hooks/useWindowSize.js"],"names":["React","useWindowSize","isClient","window","getSize","useCallback","width","innerWidth","undefined","height","innerHeight","useState","size","setSize","useEffect","onHandleResize","addEventListener","removeEventListener"],"mappings":"+IAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,KAAMC,CAAAA,aAAa,CAAG,IAAM,CAC1B,KAAMC,CAAAA,QAAQ,CAAG,MAAOC,CAAAA,MAAP,GAAkB,QAAnC,CAEA,KAAMC,CAAAA,OAAO,CAAGJ,KAAK,CAACK,WAAN,CACd,KAAO,CACLC,KAAK,CAAEJ,QAAQ,CAAGC,MAAM,CAACI,UAAV,CAAuBC,SADjC,CAELC,MAAM,CAAEP,QAAQ,CAAGC,MAAM,CAACO,WAAV,CAAwBF,SAFnC,CAAP,CADc,CAKd,CAACN,QAAD,CALc,CAAhB,CAH0B,sBAWFF,KAAK,CAACW,QAAN,CAAeP,OAAf,CAXE,oDAWnBQ,IAXmB,qBAWbC,OAXa,qBAa1Bb,KAAK,CAACc,SAAN,CAAgB,IAAM,CACpB,GAAI,CAACZ,QAAL,CAAe,CACb,MAAO,MAAP,CACD,CACD,KAAMa,CAAAA,cAAc,CAAG,IAAM,CAC3BF,OAAO,CAACT,OAAD,CAAP,CACD,CAFD,CAGAD,MAAM,CAACa,gBAAP,CAAwB,QAAxB,CAAkCD,cAAlC,EACA,MAAO,IAAMZ,MAAM,CAACc,mBAAP,CAA2B,QAA3B,CAAqCF,cAArC,CAAb,CACD,CATD,CASG,CAACX,OAAD,CAAUF,QAAV,CATH,EAWA,MAAOU,CAAAA,IAAP,CACD,CAzBD,CA2BA,cAAeX,CAAAA,aAAf","sourcesContent":["import React from 'react';\n\nconst useWindowSize = () => {\n  const isClient = typeof window === 'object';\n\n  const getSize = React.useCallback(\n    () => ({\n      width: isClient ? window.innerWidth : undefined,\n      height: isClient ? window.innerHeight : undefined,\n    }),\n    [isClient]\n  );\n\n  const [size, setSize] = React.useState(getSize);\n\n  React.useEffect(() => {\n    if (!isClient) {\n      return false;\n    }\n    const onHandleResize = () => {\n      setSize(getSize);\n    };\n    window.addEventListener('resize', onHandleResize);\n    return () => window.removeEventListener('resize', onHandleResize);\n  }, [getSize, isClient]);\n\n  return size;\n};\n\nexport default useWindowSize;\n"]},"metadata":{},"sourceType":"module"}