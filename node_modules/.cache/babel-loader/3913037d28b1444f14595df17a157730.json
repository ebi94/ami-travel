{"ast":null,"code":"import \"antd/es/input/style/css\";\nimport _Input from \"antd/es/input\";\nimport _objectSpread from \"/var/www/html/ami-travel/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/var/www/html/ami-travel/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/var/www/html/ami-travel/src/components/Map/MapSearchBox.js\";\nimport React, { useState, useRef } from 'react';\nimport _ from 'lodash';\nimport { Marker } from 'react-google-maps';\nimport MapWrapper from './MapWrapper';\nimport makerImage from './hotelMapMarker.png';\n\nconst _require = require('react-google-maps/lib/components/places/SearchBox'),\n      SearchBox = _require.SearchBox;\n\nconst MapWithSearchBox = props => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        dragNDropData = _useState2[0],\n        setDragNDropData = _useState2[1];\n\n  const updatevalue = props.updatevalue,\n        name = props.name;\n\n  const _useState3 = useState({\n    searchedLocation: ''\n  }),\n        _useState4 = _slicedToArray(_useState3, 2),\n        locationInput = _useState4[0],\n        setLocationInput = _useState4[1];\n\n  const _useState5 = useState({\n    center: {\n      lat: 40.7128,\n      lng: -74.006\n    },\n    markers: [{\n      position: {\n        lat: 40.7128,\n        lng: -74.006\n      }\n    }],\n    places: []\n  }),\n        _useState6 = _slicedToArray(_useState5, 2),\n        locationDetails = _useState6[0],\n        setLocationDetails = _useState6[1]; // const googleMapRef = useRef(null);\n\n\n  const SearchBoxRef = useRef(null);\n\n  const onPlacesChanged = () => {\n    const places = SearchBoxRef.current.getPlaces();\n    const bounds = new window.google.maps.LatLngBounds();\n    places.forEach(place => {\n      if (place.geometry.viewport) {\n        bounds.union(place.geometry.viewport);\n      } else {\n        bounds.extend(place.geometry.location);\n      }\n    });\n    const nextMarkers = places.map(place => ({\n      position: place.geometry.location\n    }));\n\n    const nextCenter = _.get(nextMarkers, '0.position', locationDetails.center);\n\n    setLocationDetails({\n      places,\n      center: nextCenter,\n      markers: nextMarkers\n    });\n    setLocationInput({\n      searchedLocation: places && places[0] && places[0].formatted_address\n    });\n    updatevalue(places);\n  };\n\n  const handleOnChange = event => {\n    event.stopPropagation();\n\n    if (event.which === '13') {\n      event.preventDefault();\n    }\n\n    setLocationInput({\n      searchedLocation: event.target.value\n    });\n  };\n\n  const handleOnPressEnter = event => {\n    event.stopPropagation();\n\n    if (event.which === '13') {\n      event.preventDefault();\n    }\n\n    setLocationInput({\n      searchedLocation: event.target.value\n    });\n  };\n\n  const onDragEndFunc = marker => {\n    let tempLocArray = [];\n    var geocoder = new window.google.maps.Geocoder();\n    const latlng = {\n      lat: Number(marker.latLng.lat().toFixed(4)),\n      lng: Number(marker.latLng.lng().toFixed(4))\n    };\n    setLocationDetails(_objectSpread(_objectSpread({}, locationDetails), {}, {\n      center: latlng\n    }));\n    geocoder.geocode({\n      latLng: latlng\n    }, function (results, status) {\n      console.log(results, 'results');\n\n      if (results[0] && results[0].formatted_address) {\n        setLocationInput({\n          searchedLocation: results[0] && results[0].formatted_address\n        });\n        const location = {\n          place_id: results[0].place_id,\n          formatted_address: results[0].formatted_address,\n          address_components: results[0].address_components,\n          geometry: results[0].geometry\n        };\n        tempLocArray.push(location);\n      }\n\n      setDragNDropData(tempLocArray);\n    });\n    updatevalue(dragNDropData);\n  };\n\n  return /*#__PURE__*/React.createElement(MapWrapper, {\n    containerElement: /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: '400px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 25\n      }\n    }),\n    mapElement: /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 19\n      }\n    }),\n    defaultZoom: 15,\n    center: locationDetails.center,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(SearchBox, {\n    ref: SearchBoxRef,\n    controlPosition: window.google.maps.ControlPosition.TOP_LEFT,\n    onPlacesChanged: onPlacesChanged,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(_Input, {\n    type: \"text\",\n    name: name,\n    placeholder: \"Enter your hotel location\",\n    style: {\n      boxSizing: \"border-box\",\n      border: \"1px solid transparent\",\n      width: \"260px\",\n      height: \"40px\",\n      marginTop: \"10px\",\n      padding: \"0 12px\",\n      borderRadius: \"2px\",\n      boxShadow: \"0 3px 6px rgba(0, 0, 0, 0.16)\",\n      fontSize: \"15px\",\n      outline: \"none\",\n      textOverflow: \"ellipses\"\n    },\n    defaultValue: \"\",\n    value: locationInput ? locationInput.searchedLocation : '',\n    onChange: handleOnChange,\n    onPressEnter: handleOnPressEnter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  })), locationDetails.markers.map((marker, index) => {\n    return /*#__PURE__*/React.createElement(Marker, {\n      icon: makerImage,\n      key: index,\n      position: marker.position,\n      onDragEnd: marker => onDragEndFunc(marker),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }\n    });\n  }));\n};\n\nexport default MapWithSearchBox;","map":{"version":3,"sources":["/var/www/html/ami-travel/src/components/Map/MapSearchBox.js"],"names":["React","useState","useRef","_","Marker","MapWrapper","makerImage","require","SearchBox","MapWithSearchBox","props","dragNDropData","setDragNDropData","updatevalue","name","searchedLocation","locationInput","setLocationInput","center","lat","lng","markers","position","places","locationDetails","setLocationDetails","SearchBoxRef","onPlacesChanged","current","getPlaces","bounds","window","google","maps","LatLngBounds","forEach","place","geometry","viewport","union","extend","location","nextMarkers","map","nextCenter","get","formatted_address","handleOnChange","event","stopPropagation","which","preventDefault","target","value","handleOnPressEnter","onDragEndFunc","marker","tempLocArray","geocoder","Geocoder","latlng","Number","latLng","toFixed","geocode","results","status","console","log","place_id","address_components","push","height","ControlPosition","TOP_LEFT","boxSizing","border","width","marginTop","padding","borderRadius","boxShadow","fontSize","outline","textOverflow","index"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react';\nimport _ from 'lodash';\nimport { Marker } from 'react-google-maps';\nimport MapWrapper from './MapWrapper';\nimport { Input } from 'antd';\nimport makerImage from './hotelMapMarker.png';\nconst {\n  SearchBox,\n} = require('react-google-maps/lib/components/places/SearchBox');\n\nconst MapWithSearchBox = (props) => {\n  const [dragNDropData, setDragNDropData] = useState([]);\n  const { updatevalue, name } = props;\n  const [locationInput, setLocationInput] = useState({ searchedLocation: '' });\n  const [locationDetails, setLocationDetails] = useState({\n    center: {\n      lat: 40.7128,\n      lng: -74.006,\n    },\n    markers: [\n      {\n        position: {\n          lat: 40.7128,\n          lng: -74.006,\n        },\n      },\n    ],\n    places: [],\n  });\n  // const googleMapRef = useRef(null);\n  const SearchBoxRef = useRef(null);\n  const onPlacesChanged = () => {\n    const places = SearchBoxRef.current.getPlaces();\n    const bounds = new window.google.maps.LatLngBounds();\n    places.forEach((place) => {\n      if (place.geometry.viewport) {\n        bounds.union(place.geometry.viewport);\n      } else {\n        bounds.extend(place.geometry.location);\n      }\n    });\n    const nextMarkers = places.map((place) => ({\n      position: place.geometry.location,\n    }));\n    const nextCenter = _.get(nextMarkers, '0.position', locationDetails.center);\n\n    setLocationDetails({\n      places,\n      center: nextCenter,\n      markers: nextMarkers,\n    });\n    setLocationInput({\n      searchedLocation: places && places[0] && places[0].formatted_address,\n    });\n    updatevalue(places);\n  };\n\n  const handleOnChange = (event) => {\n    event.stopPropagation();\n    if (event.which === '13') {\n      event.preventDefault();\n    }\n    setLocationInput({ searchedLocation: event.target.value });\n  };\n\n  const handleOnPressEnter = (event) => {\n    event.stopPropagation();\n    if (event.which === '13') {\n      event.preventDefault();\n    }\n    setLocationInput({ searchedLocation: event.target.value });\n  };\n\n  const onDragEndFunc = (marker) => {\n    let tempLocArray = [];\n    var geocoder = new window.google.maps.Geocoder();\n    const latlng = {\n      lat: Number(marker.latLng.lat().toFixed(4)),\n      lng: Number(marker.latLng.lng().toFixed(4)),\n    };\n\n    setLocationDetails({\n      ...locationDetails,\n      center: latlng,\n    });\n\n    geocoder.geocode({ latLng: latlng }, function (results, status) {\n      console.log(results, 'results');\n      if (results[0] && results[0].formatted_address) {\n        setLocationInput({\n          searchedLocation: results[0] && results[0].formatted_address,\n        });\n        const location = {\n          place_id: results[0].place_id,\n          formatted_address: results[0].formatted_address,\n          address_components: results[0].address_components,\n          geometry: results[0].geometry,\n        };\n        tempLocArray.push(location);\n      }\n      setDragNDropData(tempLocArray);\n    });\n    updatevalue(dragNDropData);\n  };\n\n  return (\n    <MapWrapper\n      containerElement={<div style={{ height: '400px' }} />}\n      mapElement={<div style={{ height: '100%' }} />}\n      defaultZoom={15}\n      center={locationDetails.center}\n    >\n      <SearchBox\n        ref={SearchBoxRef}\n        controlPosition={window.google.maps.ControlPosition.TOP_LEFT}\n        onPlacesChanged={onPlacesChanged}\n      >\n        <Input\n          type=\"text\"\n          name={name}\n          placeholder=\"Enter your hotel location\"\n          style={{\n            boxSizing: `border-box`,\n            border: `1px solid transparent`,\n            width: `260px`,\n            height: `40px`,\n            marginTop: `10px`,\n            padding: `0 12px`,\n            borderRadius: `2px`,\n            boxShadow: `0 3px 6px rgba(0, 0, 0, 0.16)`,\n            fontSize: `15px`,\n            outline: `none`,\n            textOverflow: `ellipses`,\n          }}\n          defaultValue=\"\"\n          value={locationInput ? locationInput.searchedLocation : ''}\n          onChange={handleOnChange}\n          onPressEnter={handleOnPressEnter}\n        />\n      </SearchBox>\n      {locationDetails.markers.map((marker, index) => {\n        return (\n          <Marker\n            icon={makerImage}\n            key={index}\n            position={marker.position}\n            onDragEnd={(marker) => onDragEndFunc(marker)}\n          />\n        );\n      })}\n    </MapWrapper>\n  );\n};\n\nexport default MapWithSearchBox;\n"]},"metadata":{},"sourceType":"module"}