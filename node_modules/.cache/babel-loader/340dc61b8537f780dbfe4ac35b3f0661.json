{"ast":null,"code":"import _objectSpread from\"/var/www/html/ami-travel/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import React from'react';import isEmpty from'lodash/isEmpty';import{withRouter}from'react-router-dom';import{FiSearch}from'react-icons/fi';import MapAutoComplete from'components/Map/MapAutoComplete';import{setStateToUrl,getStateFromUrl}from'library/helpers/url_handler';import{mapDataHelper}from'components/Map/mapDataHelper';import{LISTING_POSTS_PAGE}from'settings/constant';import{NavbarSearchWrapper}from'./Header.style';const NavbarSearch=props=>{const updatevalueFunc=value=>{const searchedPlaceAPIData=value.searchedPlaceAPIData;let tempLocation=[];const mapData=!isEmpty(searchedPlaceAPIData)?mapDataHelper(searchedPlaceAPIData):[];if(!isEmpty(mapData)&&mapData.length!==0){mapData.forEach(singleMapData=>tempLocation.push({lat:singleMapData?singleMapData.lat.toFixed(3):null,lng:singleMapData?singleMapData.lng.toFixed(3):null}));}const searchLocation=tempLocation?tempLocation[0]:{};if(!isEmpty(searchLocation)){const state=getStateFromUrl(props.location);const query=_objectSpread(_objectSpread({},state),{},{location:searchLocation});const search=setStateToUrl(query);props.history.push({pathname:LISTING_POSTS_PAGE,search:search});}};return/*#__PURE__*/React.createElement(NavbarSearchWrapper,{className:\"navbar_search\"});};export default withRouter(NavbarSearch);","map":{"version":3,"sources":["/var/www/html/ami-travel/src/container/Layout/Header/NavbarSearch.js"],"names":["React","isEmpty","withRouter","FiSearch","MapAutoComplete","setStateToUrl","getStateFromUrl","mapDataHelper","LISTING_POSTS_PAGE","NavbarSearchWrapper","NavbarSearch","props","updatevalueFunc","value","searchedPlaceAPIData","tempLocation","mapData","length","forEach","singleMapData","push","lat","toFixed","lng","searchLocation","state","location","query","search","history","pathname"],"mappings":"8IAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,OAAP,KAAoB,gBAApB,CACA,OAASC,UAAT,KAA2B,kBAA3B,CACA,OAASC,QAAT,KAAyB,gBAAzB,CACA,MAAOC,CAAAA,eAAP,KAA4B,gCAA5B,CACA,OAASC,aAAT,CAAwBC,eAAxB,KAA+C,6BAA/C,CACA,OAASC,aAAT,KAA8B,8BAA9B,CACA,OAASC,kBAAT,KAAmC,mBAAnC,CACA,OAASC,mBAAT,KAAoC,gBAApC,CAEA,KAAMC,CAAAA,YAAY,CAAIC,KAAD,EAAW,CAC9B,KAAMC,CAAAA,eAAe,CAAIC,KAAD,EAAW,MACzBC,CAAAA,oBADyB,CACAD,KADA,CACzBC,oBADyB,CAEjC,GAAIC,CAAAA,YAAY,CAAG,EAAnB,CACA,KAAMC,CAAAA,OAAO,CAAG,CAACf,OAAO,CAACa,oBAAD,CAAR,CACZP,aAAa,CAACO,oBAAD,CADD,CAEZ,EAFJ,CAGA,GAAI,CAACb,OAAO,CAACe,OAAD,CAAR,EAAqBA,OAAO,CAACC,MAAR,GAAmB,CAA5C,CAA+C,CAC7CD,OAAO,CAACE,OAAR,CAAiBC,aAAD,EACdJ,YAAY,CAACK,IAAb,CAAkB,CAChBC,GAAG,CAAEF,aAAa,CAAGA,aAAa,CAACE,GAAd,CAAkBC,OAAlB,CAA0B,CAA1B,CAAH,CAAkC,IADpC,CAEhBC,GAAG,CAAEJ,aAAa,CAAGA,aAAa,CAACI,GAAd,CAAkBD,OAAlB,CAA0B,CAA1B,CAAH,CAAkC,IAFpC,CAAlB,CADF,EAMD,CACD,KAAME,CAAAA,cAAc,CAAGT,YAAY,CAAGA,YAAY,CAAC,CAAD,CAAf,CAAqB,EAAxD,CACA,GAAI,CAACd,OAAO,CAACuB,cAAD,CAAZ,CAA8B,CAC5B,KAAMC,CAAAA,KAAK,CAAGnB,eAAe,CAACK,KAAK,CAACe,QAAP,CAA7B,CACA,KAAMC,CAAAA,KAAK,gCACNF,KADM,MAETC,QAAQ,CAAEF,cAFD,EAAX,CAIA,KAAMI,CAAAA,MAAM,CAAGvB,aAAa,CAACsB,KAAD,CAA5B,CACAhB,KAAK,CAACkB,OAAN,CAAcT,IAAd,CAAmB,CACjBU,QAAQ,CAAEtB,kBADO,CAEjBoB,MAAM,CAAEA,MAFS,CAAnB,EAID,CACF,CA3BD,CA6BA,mBACE,oBAAC,mBAAD,EAAqB,SAAS,CAAC,eAA/B,EADF,CAMD,CApCD,CAsCA,cAAe1B,CAAAA,UAAU,CAACQ,YAAD,CAAzB","sourcesContent":["import React from 'react';\nimport isEmpty from 'lodash/isEmpty';\nimport { withRouter } from 'react-router-dom';\nimport { FiSearch } from 'react-icons/fi';\nimport MapAutoComplete from 'components/Map/MapAutoComplete';\nimport { setStateToUrl, getStateFromUrl } from 'library/helpers/url_handler';\nimport { mapDataHelper } from 'components/Map/mapDataHelper';\nimport { LISTING_POSTS_PAGE } from 'settings/constant';\nimport { NavbarSearchWrapper } from './Header.style';\n\nconst NavbarSearch = (props) => {\n  const updatevalueFunc = (value) => {\n    const { searchedPlaceAPIData } = value;\n    let tempLocation = [];\n    const mapData = !isEmpty(searchedPlaceAPIData)\n      ? mapDataHelper(searchedPlaceAPIData)\n      : [];\n    if (!isEmpty(mapData) && mapData.length !== 0) {\n      mapData.forEach((singleMapData) =>\n        tempLocation.push({\n          lat: singleMapData ? singleMapData.lat.toFixed(3) : null,\n          lng: singleMapData ? singleMapData.lng.toFixed(3) : null,\n        })\n      );\n    }\n    const searchLocation = tempLocation ? tempLocation[0] : {};\n    if (!isEmpty(searchLocation)) {\n      const state = getStateFromUrl(props.location);\n      const query = {\n        ...state,\n        location: searchLocation,\n      };\n      const search = setStateToUrl(query);\n      props.history.push({\n        pathname: LISTING_POSTS_PAGE,\n        search: search,\n      });\n    }\n  };\n\n  return (\n    <NavbarSearchWrapper className=\"navbar_search\">\n      {/* <MapAutoComplete updatevalue={(value) => updatevalueFunc(value)} /> */}\n      {/* <FiSearch /> */}\n    </NavbarSearchWrapper>\n  );\n};\n\nexport default withRouter(NavbarSearch);\n"]},"metadata":{},"sourceType":"module"}