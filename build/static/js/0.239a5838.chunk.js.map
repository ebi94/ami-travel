{"version":3,"sources":["../node_modules/react-hook-form/dist/react-hook-form.es.js"],"names":["isNullOrUndefined","value","isArray","Array","isObjectType","isObject","isHTMLElement","nodeType","Node","ELEMENT_NODE","VALIDATION_MODE","EVENTS","INPUT_VALIDATION_RULES","REGEX_IS_DEEP_PROP","REGEX_IS_PLAIN_PROP","REGEX_PROP_NAME","REGEX_ESCAPE_CHAR","isKey","test","stringToPath","string","result","replace","match","number","quote","push","set","object","path","index","tempPath","length","lastIndex","key","newValue","objValue","isNaN","transformToNestObject","data","Object","entries","reduce","previous","assign","isUndefined","val","undefined","get","obj","defaultValue","split","filter","Boolean","focusOnErrorField","fields","fieldErrors","field","ref","focus","options","removeAllEventListeners","validateWithStateUpdate","removeEventListener","isRadioInput","element","type","isCheckBoxInput","isDetached","HTMLElement","DOCUMENT_NODE","parentNode","isEmptyObject","keys","castPath","parent","updatePath","baseGet","array","start","end","baseSlice","unset","paths","forEach","childObject","previousObjRef","k","slice","objectRef","currentPaths","currentPathsLength","item","baseUnset","isSameRef","fieldValue","defaultReturn","isValid","getRadioValue","option","checked","isFileInput","isMultipleSelect","isEmptyString","defaultResult","validResult","getCheckboxValue","values","map","attributes","getFieldValue","name","files","selected","isString","getFieldsValues","search","output","startsWith","find","nest","isSameError","error","types","message","objectA","objectB","objectAKeys","objectBKeys","every","compareObject","isRegex","RegExp","getValueAndMessage","validationData","isFunction","isBoolean","isMessage","isValidElement","getValidateError","appendErrors","validateAllFieldCriteria","errors","validateField","fieldsRef","required","maxLength","minLength","min","max","pattern","validate","a","current","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","requiredValue","requiredMessage","_a","maxValue","maxMessage","minValue","minMessage","valueNumber","valueAsNumber","parseFloat","exceedMin","valueDate","valueAsDate","Date","maxLengthValue","minLengthValue","inputLength","toString","patternValue","patternMessage","validateRef","validateError","validationResult","validateFunction","validateResult","parseErrorSchema","inner","validateWithSchema","validationSchema","validationResolver","context","abortEarly","isPrimitive","getPath","getInnerPath","pathWithIndex","assignWatchFields","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","parentPath","flat","Infinity","getPath$1","skipValidation","isOnChange","hasError","isBlurEvent","isOnSubmit","isReValidateOnSubmit","isOnBlur","isReValidateOnBlur","isSubmitted","getFieldArrayParentName","substring","indexOf","getFieldValueByName","results","getIsFieldsDifferent","referenceArray","differenceArray","isMatch","i","dataA","dataB","isMatchFieldArrayName","searchName","isNameInFieldArray","names","some","modeChecker","mode","isRadioOrCheckboxFunction","useForm","reValidateMode","validationContext","defaultValues","submitFocusError","validateCriteriaMode","useRef","errorsRef","touchedFieldsRef","fieldArrayDefaultValues","watchFieldsRef","Set","dirtyFieldsRef","fieldsWithValidationRef","validFieldsRef","isValidRef","defaultValuesRef","defaultValuesAtRenderRef","isUnMount","isWatchAllRef","isSubmittedRef","isDirtyRef","submitCountRef","isSubmittingRef","handleChangeRef","resetFieldArrayFunctionRef","validationContextRef","fieldArrayNamesRef","useState","render","isWindowUndefined","window","shouldValidateSchemaOrResolver","isWeb","document","isProxyEnabled","Proxy","readFormStateRef","dirty","dirtyFields","submitCount","touched","isSubmitting","reRender","useCallback","shouldRenderBaseOnError","shouldRender","shouldReRender","validFields","fieldsWithValidation","isFieldValid","isFormValid","currentFieldError","existFieldError","has","isManual","shouldRenderBasedOnError","previousError","delete","setFieldValue","rawValue","radioRef","selectRef","includes","checkboxRef","setDirty","isFieldDirty","isFieldArray","previousDirtyFieldsLength","size","fieldArrayName","isDirtyChanged","setInternalValues","parentFieldName","isValueArray","setInternalValue","executeValidation","skipReRender","executeSchemaOrResolverValidation","payload","previousFormIsValid","triggerValidation","Promise","all","isFieldWatched","target","currentError","shouldSkipValidation","shouldUpdateDirty","validateSchemaOrResolver","then","removeFieldEventListener","forceDelete","handleChange","mutationWatcher","disconnect","findRemovedFieldAndRemoveListener","removeFieldEventListenerAndRef","setInternalError","registerFieldsRef","validateOptions","console","warn","fieldRefAndValidationOptions","isEmptyDefaultValue","onDetachCallback","observer","MutationObserver","observe","childList","subtree","onDomRemove","addEventListener","attachEventListeners","handleSubmit","callback","e","preventDefault","persist","fieldError","useEffect","formState","commonProps","setValue","valueOrShouldValidate","shouldValidate","isArrayValue","isStringFieldName","register","refOrValidationOptions","validationOptions","unregister","getValues","outputValues","prop","control","validateSchemaIsValid","watch","fieldNames","isDefaultValueUndefined","combinedDefaultValues","reset","omitResetState","inputRef","closest","resetFieldArray","resetRefs","clearError","setError","__rest","s","t","p","prototype","hasOwnProperty","call","getOwnPropertySymbols","propertyIsEnumerable","FormGlobalContext","createContext","useFormContext","useContext","Controller","rules","InnerComponent","as","onBlur","onChange","onChangeName","onBlurName","valueName","onFocus","rest","methods","setInputStateValue","valueRef","isCheckboxInput","shouldReValidateOnBlur","rulesRef","onFocusRef","isNotFieldArray","commonTask","event","getInputValue","registerField","defineProperty","props","arg","args","cloneElement","createElement"],"mappings":"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","file":"static/js/0.239a5838.chunk.js","sourcesContent":["import { isValidElement, useRef, useState, useCallback, useEffect, createContext, useContext, createElement, cloneElement, Fragment } from 'react';\n\nvar isNullOrUndefined = (value) => value == null;\n\nvar isArray = (value) => Array.isArray(value);\n\nconst isObjectType = (value) => typeof value === 'object';\r\nvar isObject = (value) => !isNullOrUndefined(value) && !isArray(value) && isObjectType(value);\n\nvar isHTMLElement = (value) => isObject(value) && value.nodeType === Node.ELEMENT_NODE;\n\nconst VALIDATION_MODE = {\r\n    onBlur: 'onBlur',\r\n    onChange: 'onChange',\r\n    onSubmit: 'onSubmit',\r\n};\r\nconst VALUE = 'value';\r\nconst UNDEFINED = 'undefined';\r\nconst EVENTS = {\r\n    BLUR: 'blur',\r\n    CHANGE: 'change',\r\n    INPUT: 'input',\r\n};\r\nconst SELECT = 'select';\r\nconst INPUT_VALIDATION_RULES = {\r\n    max: 'max',\r\n    min: 'min',\r\n    maxLength: 'maxLength',\r\n    minLength: 'minLength',\r\n    pattern: 'pattern',\r\n    required: 'required',\r\n    validate: 'validate',\r\n};\r\nconst REGEX_IS_DEEP_PROP = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/;\r\nconst REGEX_IS_PLAIN_PROP = /^\\w*$/;\r\nconst REGEX_PROP_NAME = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\r\nconst REGEX_ESCAPE_CHAR = /\\\\(\\\\)?/g;\r\nconst REGEX_ARRAY_FIELD_INDEX = /[\\d+]/g;\n\nfunction attachEventListeners({ field: { ref }, handleChange, isRadioOrCheckbox, }) {\r\n    if (isHTMLElement(ref) && handleChange) {\r\n        ref.addEventListener(isRadioOrCheckbox ? EVENTS.CHANGE : EVENTS.INPUT, handleChange);\r\n        ref.addEventListener(EVENTS.BLUR, handleChange);\r\n    }\r\n}\n\nvar isKey = (value) => !isArray(value) &&\r\n    (REGEX_IS_PLAIN_PROP.test(value) || !REGEX_IS_DEEP_PROP.test(value));\n\nvar stringToPath = (string) => {\r\n    const result = [];\r\n    string.replace(REGEX_PROP_NAME, (match, number, quote, string) => {\r\n        result.push(quote ? string.replace(REGEX_ESCAPE_CHAR, '$1') : number || match);\r\n    });\r\n    return result;\r\n};\n\nfunction set(object, path, value) {\r\n    let index = -1;\r\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\r\n    const length = tempPath.length;\r\n    const lastIndex = length - 1;\r\n    while (++index < length) {\r\n        const key = tempPath[index];\r\n        let newValue = value;\r\n        if (index !== lastIndex) {\r\n            const objValue = object[key];\r\n            newValue =\r\n                isObject(objValue) || isArray(objValue)\r\n                    ? objValue\r\n                    : !isNaN(+tempPath[index + 1])\r\n                        ? []\r\n                        : {};\r\n        }\r\n        object[key] = newValue;\r\n        object = object[key];\r\n    }\r\n    return object;\r\n}\n\nvar transformToNestObject = (data) => Object.entries(data).reduce((previous, [key, value]) => {\r\n    if (!isKey(key)) {\r\n        set(previous, key, value);\r\n        return previous;\r\n    }\r\n    return Object.assign(Object.assign({}, previous), { [key]: value });\r\n}, {});\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (obj, path, defaultValue) => {\r\n    const result = path\r\n        .split(/[,[\\].]+?/)\r\n        .filter(Boolean)\r\n        .reduce((result, key) => (isNullOrUndefined(result) ? result : result[key]), obj);\r\n    return isUndefined(result) || result === obj\r\n        ? isUndefined(obj[path])\r\n            ? defaultValue\r\n            : obj[path]\r\n        : result;\r\n};\n\nvar focusOnErrorField = (fields, fieldErrors) => {\r\n    for (const key in fields) {\r\n        if (get(fieldErrors, key)) {\r\n            const field = fields[key];\r\n            if (field) {\r\n                if (field.ref.focus) {\r\n                    field.ref.focus();\r\n                    break;\r\n                }\r\n                else if (field.options) {\r\n                    field.options[0].ref.focus();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\n\nvar removeAllEventListeners = (ref, validateWithStateUpdate) => {\r\n    if (isHTMLElement(ref) && ref.removeEventListener) {\r\n        ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\r\n        ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\r\n        ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\r\n    }\r\n};\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nfunction isDetached(element) {\r\n    if (!element) {\r\n        return true;\r\n    }\r\n    if (!(element instanceof HTMLElement) ||\r\n        element.nodeType === Node.DOCUMENT_NODE) {\r\n        return false;\r\n    }\r\n    return isDetached(element.parentNode);\r\n}\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nfunction castPath(value) {\r\n    return isArray(value) ? value : stringToPath(value);\r\n}\r\nfunction baseGet(object, path) {\r\n    const updatePath = isKey(path) ? [path] : castPath(path);\r\n    const length = path.length;\r\n    let index = 0;\r\n    while (index < length) {\r\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\r\n    }\r\n    return index == length ? object : undefined;\r\n}\r\nfunction baseSlice(array, start, end) {\r\n    let index = -1;\r\n    let length = array.length;\r\n    if (start < 0) {\r\n        start = -start > length ? 0 : length + start;\r\n    }\r\n    end = end > length ? length : end;\r\n    if (end < 0) {\r\n        end += length;\r\n    }\r\n    length = start > end ? 0 : end - start;\r\n    const result = Array(length);\r\n    while (++index < length) {\r\n        result[index] = array[index + start];\r\n    }\r\n    return result;\r\n}\r\nfunction parent(object, path) {\r\n    return path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));\r\n}\r\nfunction baseUnset(object, path) {\r\n    const updatePath = isKey(path) ? [path] : castPath(path);\r\n    const childObject = parent(object, updatePath);\r\n    const key = updatePath[updatePath.length - 1];\r\n    const result = !(childObject != null) || delete childObject[key];\r\n    let previousObjRef = undefined;\r\n    for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\r\n        let index = -1;\r\n        let objectRef = undefined;\r\n        const currentPaths = updatePath.slice(0, -(k + 1));\r\n        const currentPathsLength = currentPaths.length - 1;\r\n        if (k > 0) {\r\n            previousObjRef = object;\r\n        }\r\n        while (++index < currentPaths.length) {\r\n            const item = currentPaths[index];\r\n            objectRef = objectRef ? objectRef[item] : object[item];\r\n            if (currentPathsLength === index) {\r\n                if ((isObject(objectRef) && isEmptyObject(objectRef)) ||\r\n                    (isArray(objectRef) &&\r\n                        !objectRef.filter((data) => isObject(data) && !isEmptyObject(data))\r\n                            .length)) {\r\n                    previousObjRef ? delete previousObjRef[item] : delete object[item];\r\n                }\r\n            }\r\n            previousObjRef = objectRef;\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction unset(object, paths) {\r\n    paths.forEach((path) => {\r\n        baseUnset(object, path);\r\n    });\r\n    return object;\r\n}\n\nconst isSameRef = (fieldValue, ref) => fieldValue && fieldValue.ref === ref;\r\nfunction findRemovedFieldAndRemoveListener(fields, handleChange, field, forceDelete) {\r\n    const { ref, ref: { name, type }, mutationWatcher, } = field;\r\n    const fieldValue = fields[name];\r\n    if (!type) {\r\n        delete fields[name];\r\n        return;\r\n    }\r\n    if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldValue) {\r\n        const { options } = fieldValue;\r\n        if (isArray(options) && options.length) {\r\n            options.filter(Boolean).forEach((option, index) => {\r\n                const { ref, mutationWatcher } = option;\r\n                if ((ref && isDetached(ref) && isSameRef(option, ref)) || forceDelete) {\r\n                    removeAllEventListeners(ref, handleChange);\r\n                    if (mutationWatcher) {\r\n                        mutationWatcher.disconnect();\r\n                    }\r\n                    unset(options, [`[${index}]`]);\r\n                }\r\n            });\r\n            if (options && !options.filter(Boolean).length) {\r\n                delete fields[name];\r\n            }\r\n        }\r\n        else {\r\n            delete fields[name];\r\n        }\r\n    }\r\n    else if ((isDetached(ref) && isSameRef(fieldValue, ref)) || forceDelete) {\r\n        removeAllEventListeners(ref, handleChange);\r\n        if (mutationWatcher) {\r\n            mutationWatcher.disconnect();\r\n        }\r\n        delete fields[name];\r\n    }\r\n}\n\nconst defaultReturn = {\r\n    isValid: false,\r\n    value: '',\r\n};\r\nvar getRadioValue = (options) => isArray(options)\r\n    ? options.reduce((previous, option) => option && option.ref.checked\r\n        ? {\r\n            isValid: true,\r\n            value: option.ref.value,\r\n        }\r\n        : previous, defaultReturn)\r\n    : defaultReturn;\n\nvar getMultipleSelectValue = (options) => [...options]\r\n    .filter(({ selected }) => selected)\r\n    .map(({ value }) => value);\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isMultipleSelect = (element) => element.type === `${SELECT}-multiple`;\n\nvar isEmptyString = (value) => value === '';\n\nconst defaultResult = {\r\n    value: false,\r\n    isValid: false,\r\n};\r\nconst validResult = { value: true, isValid: true };\r\nvar getCheckboxValue = (options) => {\r\n    if (isArray(options)) {\r\n        if (options.length > 1) {\r\n            const values = options\r\n                .filter((option) => option && option.ref.checked)\r\n                .map(({ ref: { value } }) => value);\r\n            return { value: values, isValid: !!values.length };\r\n        }\r\n        const { checked, value, attributes } = options[0].ref;\r\n        return checked\r\n            ? attributes && !isUndefined(attributes.value)\r\n                ? isUndefined(value) || isEmptyString(value)\r\n                    ? validResult\r\n                    : { value: value, isValid: true }\r\n                : validResult\r\n            : defaultResult;\r\n    }\r\n    return defaultResult;\r\n};\n\nfunction getFieldValue(fields, ref) {\r\n    const { name, value } = ref;\r\n    const field = fields[name];\r\n    if (isFileInput(ref)) {\r\n        return ref.files;\r\n    }\r\n    if (isRadioInput(ref)) {\r\n        return field ? getRadioValue(field.options).value : '';\r\n    }\r\n    if (isMultipleSelect(ref)) {\r\n        return getMultipleSelectValue(ref.options);\r\n    }\r\n    if (isCheckBoxInput(ref)) {\r\n        return field ? getCheckboxValue(field.options).value : false;\r\n    }\r\n    return value;\r\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar getFieldsValues = (fields, search) => {\r\n    const output = {};\r\n    for (const name in fields) {\r\n        if (isUndefined(search) ||\r\n            (isString(search)\r\n                ? name.startsWith(search)\r\n                : isArray(search)\r\n                    ? search.find((data) => name.startsWith(data))\r\n                    : search && search.nest)) {\r\n            output[name] = getFieldValue(fields, fields[name].ref);\r\n        }\r\n    }\r\n    return output;\r\n};\n\nvar compareObject = (objectA = {}, objectB = {}) => {\r\n    const objectAKeys = Object.keys(objectA);\r\n    const objectBKeys = Object.keys(objectB);\r\n    return (objectAKeys.length === objectBKeys.length &&\r\n        objectAKeys.every((key) => objectB[key] && objectB[key] === objectA[key]));\r\n};\n\nvar isSameError = (error, { type, types, message }) => isObject(error) &&\r\n    error.type === type &&\r\n    error.message === message &&\r\n    compareObject(error.types, types);\n\nfunction shouldRenderBasedOnError({ errors, name, error, validFields, fieldsWithValidation, }) {\r\n    const isFieldValid = isEmptyObject(error);\r\n    const isFormValid = isEmptyObject(errors);\r\n    const currentFieldError = get(error, name);\r\n    const existFieldError = get(errors, name);\r\n    if ((isFieldValid && validFields.has(name)) ||\r\n        (existFieldError && existFieldError.isManual)) {\r\n        return false;\r\n    }\r\n    if (isFormValid !== isFieldValid ||\r\n        (!isFormValid && !existFieldError) ||\r\n        (isFieldValid && fieldsWithValidation.has(name) && !validFields.has(name))) {\r\n        return true;\r\n    }\r\n    return currentFieldError && !isSameError(existFieldError, currentFieldError);\r\n}\n\nvar isRegex = (value) => value instanceof RegExp;\n\nvar getValueAndMessage = (validationData) => {\r\n    const isValueMessage = (value) => isObject(value) && !isRegex(value);\r\n    return isValueMessage(validationData)\r\n        ? validationData\r\n        : {\r\n            value: validationData,\r\n            message: '',\r\n        };\r\n};\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar isMessage = (value) => isString(value) || (isObject(value) && isValidElement(value));\n\nfunction getValidateError(result, ref, type = 'validate') {\r\n    if (isMessage(result) || (isBoolean(result) && !result)) {\r\n        return {\r\n            type,\r\n            message: isMessage(result) ? result : '',\r\n            ref,\r\n        };\r\n    }\r\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => {\r\n    if (validateAllFieldCriteria) {\r\n        const error = errors[name];\r\n        return Object.assign(Object.assign({}, error), { types: Object.assign(Object.assign({}, (error && error.types ? error.types : {})), { [type]: message || true }) });\r\n    }\r\n    return {};\r\n};\n\nvar validateField = async (fieldsRef, validateAllFieldCriteria, { ref, ref: { type, value, name }, options, required, maxLength, minLength, min, max, pattern, validate, }) => {\r\n    var _a;\r\n    const fields = fieldsRef.current;\r\n    const error = {};\r\n    const isRadio = isRadioInput(ref);\r\n    const isCheckBox = isCheckBoxInput(ref);\r\n    const isRadioOrCheckbox = isRadio || isCheckBox;\r\n    const isEmpty = isEmptyString(value);\r\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\r\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\r\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\r\n        error[name] = Object.assign({ type: exceedMax ? maxType : minType, message,\r\n            ref }, (exceedMax\r\n            ? appendErrorsCurry(maxType, message)\r\n            : appendErrorsCurry(minType, message)));\r\n        if (!validateAllFieldCriteria) {\r\n            return error;\r\n        }\r\n    };\r\n    if (required &&\r\n        ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\r\n            (isBoolean(value) && !value) ||\r\n            (isCheckBox && !getCheckboxValue(options).isValid) ||\r\n            (isRadio && !getRadioValue(options).isValid))) {\r\n        const { value: requiredValue, message: requiredMessage } = isMessage(required)\r\n            ? { value: !!required, message: required }\r\n            : getValueAndMessage(required);\r\n        if (requiredValue) {\r\n            error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.required, message: requiredMessage, ref: isRadioOrCheckbox ? (_a = fields[name].options) === null || _a === void 0 ? void 0 : _a[0].ref : ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage));\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\r\n        let exceedMax;\r\n        let exceedMin;\r\n        const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\r\n        const { value: minValue, message: minMessage } = getValueAndMessage(min);\r\n        if (type === 'number' || (!type && !isNaN(value))) {\r\n            const valueNumber = ref.valueAsNumber || parseFloat(value);\r\n            if (!isNullOrUndefined(maxValue)) {\r\n                exceedMax = valueNumber > maxValue;\r\n            }\r\n            if (!isNullOrUndefined(minValue)) {\r\n                exceedMin = valueNumber < minValue;\r\n            }\r\n        }\r\n        else {\r\n            const valueDate = ref.valueAsDate || new Date(value);\r\n            if (isString(maxValue)) {\r\n                exceedMax = valueDate > new Date(maxValue);\r\n            }\r\n            if (isString(minValue)) {\r\n                exceedMin = valueDate < new Date(minValue);\r\n            }\r\n        }\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxMessage, minMessage, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (isString(value) && !isEmpty && (maxLength || minLength)) {\r\n        const { value: maxLengthValue, message: maxLengthMessage, } = getValueAndMessage(maxLength);\r\n        const { value: minLengthValue, message: minLengthMessage, } = getValueAndMessage(minLength);\r\n        const inputLength = value.toString().length;\r\n        const exceedMax = !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\r\n        const exceedMin = !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (pattern && !isEmpty) {\r\n        const { value: patternValue, message: patternMessage } = getValueAndMessage(pattern);\r\n        if (isRegex(patternValue) && !patternValue.test(value)) {\r\n            error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.pattern, message: patternMessage, ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage));\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (validate) {\r\n        const fieldValue = getFieldValue(fields, ref);\r\n        const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\r\n        if (isFunction(validate)) {\r\n            const result = await validate(fieldValue);\r\n            const validateError = getValidateError(result, validateRef);\r\n            if (validateError) {\r\n                error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n        else if (isObject(validate)) {\r\n            let validationResult = {};\r\n            for (const [key, validateFunction] of Object.entries(validate)) {\r\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\r\n                    break;\r\n                }\r\n                const validateResult = await validateFunction(fieldValue);\r\n                const validateError = getValidateError(validateResult, validateRef, key);\r\n                if (validateError) {\r\n                    validationResult = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\r\n                    if (validateAllFieldCriteria) {\r\n                        error[name] = validationResult;\r\n                    }\r\n                }\r\n            }\r\n            if (!isEmptyObject(validationResult)) {\r\n                error[name] = Object.assign({ ref: validateRef }, validationResult);\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return error;\r\n};\n\nconst parseErrorSchema = (error, validateAllFieldCriteria) => isArray(error.inner)\r\n    ? error.inner.reduce((previous, { path, message, type }) => (Object.assign(Object.assign({}, previous), (path\r\n        ? previous[path] && validateAllFieldCriteria\r\n            ? {\r\n                [path]: appendErrors(path, validateAllFieldCriteria, previous, type, message),\r\n            }\r\n            : {\r\n                [path]: previous[path] || Object.assign({ message,\r\n                    type }, (validateAllFieldCriteria\r\n                    ? {\r\n                        types: { [type]: message || true },\r\n                    }\r\n                    : {})),\r\n            }\r\n        : {}))), {})\r\n    : {\r\n        [error.path]: { message: error.message, type: error.type },\r\n    };\r\nasync function validateWithSchema(validationSchema, validateAllFieldCriteria, data, validationResolver, context) {\r\n    if (validationResolver) {\r\n        return validationResolver(data, context);\r\n    }\r\n    try {\r\n        return {\r\n            values: await validationSchema.validate(data, {\r\n                abortEarly: false,\r\n                context,\r\n            }),\r\n            errors: {},\r\n        };\r\n    }\r\n    catch (e) {\r\n        return {\r\n            values: {},\r\n            errors: transformToNestObject(parseErrorSchema(e, validateAllFieldCriteria)),\r\n        };\r\n    }\r\n}\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nconst getPath = (path, values) => {\r\n    const getInnerPath = (value, key, isObject) => {\r\n        const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\r\n        return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\r\n    };\r\n    return isArray(values)\r\n        ? values.map((value, key) => getInnerPath(value, key))\r\n        : Object.entries(values).map(([key, value]) => getInnerPath(value, key, true));\r\n};\r\nvar getPath$1 = (parentPath, value) => getPath(parentPath, value).flat(Infinity);\n\nvar assignWatchFields = (fieldValues, fieldName, watchFields, inputValue, isSingleField) => {\r\n    let value;\r\n    watchFields.add(fieldName);\r\n    if (isEmptyObject(fieldValues)) {\r\n        value = undefined;\r\n    }\r\n    else if (!isUndefined(fieldValues[fieldName])) {\r\n        value = fieldValues[fieldName];\r\n        watchFields.add(fieldName);\r\n    }\r\n    else {\r\n        value = get(transformToNestObject(fieldValues), fieldName);\r\n        if (!isUndefined(value)) {\r\n            getPath$1(fieldName, value).forEach((name) => watchFields.add(name));\r\n        }\r\n    }\r\n    return isUndefined(value)\r\n        ? isSingleField\r\n            ? inputValue\r\n            : get(inputValue, fieldName)\r\n        : value;\r\n};\n\nvar skipValidation = ({ isOnChange, hasError, isBlurEvent, isOnSubmit, isReValidateOnSubmit, isOnBlur, isReValidateOnBlur, isSubmitted, }) => (isOnChange && isBlurEvent) ||\r\n    (isOnSubmit && isReValidateOnSubmit) ||\r\n    (isOnSubmit && !isSubmitted) ||\r\n    (isOnBlur && !isBlurEvent && !hasError) ||\r\n    (isReValidateOnBlur && !isBlurEvent && hasError) ||\r\n    (isReValidateOnSubmit && isSubmitted);\n\nvar getFieldArrayParentName = (name) => name.substring(0, name.indexOf('['));\n\nvar getFieldValueByName = (fields, name) => {\r\n    const results = transformToNestObject(getFieldsValues(fields));\r\n    return name ? get(results, name, results) : results;\r\n};\n\nfunction getIsFieldsDifferent(referenceArray, differenceArray) {\r\n    let isMatch = false;\r\n    if (!isArray(referenceArray) ||\r\n        !isArray(differenceArray) ||\r\n        referenceArray.length !== differenceArray.length) {\r\n        return true;\r\n    }\r\n    for (let i = 0; i < referenceArray.length; i++) {\r\n        if (isMatch) {\r\n            break;\r\n        }\r\n        const dataA = referenceArray[i];\r\n        const dataB = differenceArray[i];\r\n        if (isUndefined(dataB) ||\r\n            Object.keys(dataA).length !== Object.keys(dataB).length) {\r\n            isMatch = true;\r\n            break;\r\n        }\r\n        for (const key in dataA) {\r\n            if (dataA[key] !== dataB[key]) {\r\n                isMatch = true;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return isMatch;\r\n}\n\nconst isMatchFieldArrayName = (name, searchName) => RegExp(`^${searchName}[\\\\d+]`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]')).test(name);\r\nvar isNameInFieldArray = (names, name) => [...names].some((current) => isMatchFieldArrayName(name, current));\n\nvar isSelectInput = (element) => element.type === `${SELECT}-one`;\n\nfunction onDomRemove(element, onDetachCallback) {\r\n    const observer = new MutationObserver(() => {\r\n        if (isDetached(element)) {\r\n            observer.disconnect();\r\n            onDetachCallback();\r\n        }\r\n    });\r\n    observer.observe(window.document, {\r\n        childList: true,\r\n        subtree: true,\r\n    });\r\n    return observer;\r\n}\n\nvar modeChecker = (mode) => ({\r\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\r\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\r\n    isOnChange: mode === VALIDATION_MODE.onChange,\r\n});\n\nvar isRadioOrCheckboxFunction = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nfunction useForm({ mode = VALIDATION_MODE.onSubmit, reValidateMode = VALIDATION_MODE.onChange, validationSchema, validationResolver, validationContext, defaultValues = {}, submitFocusError = true, validateCriteriaMode, } = {}) {\r\n    const fieldsRef = useRef({});\r\n    const errorsRef = useRef({});\r\n    const touchedFieldsRef = useRef({});\r\n    const fieldArrayDefaultValues = useRef({});\r\n    const watchFieldsRef = useRef(new Set());\r\n    const dirtyFieldsRef = useRef(new Set());\r\n    const fieldsWithValidationRef = useRef(new Set());\r\n    const validFieldsRef = useRef(new Set());\r\n    const isValidRef = useRef(true);\r\n    const defaultValuesRef = useRef(defaultValues);\r\n    const defaultValuesAtRenderRef = useRef({});\r\n    const isUnMount = useRef(false);\r\n    const isWatchAllRef = useRef(false);\r\n    const isSubmittedRef = useRef(false);\r\n    const isDirtyRef = useRef(false);\r\n    const submitCountRef = useRef(0);\r\n    const isSubmittingRef = useRef(false);\r\n    const handleChangeRef = useRef();\r\n    const resetFieldArrayFunctionRef = useRef({});\r\n    const validationContextRef = useRef(validationContext);\r\n    const fieldArrayNamesRef = useRef(new Set());\r\n    const [, render] = useState();\r\n    const { isOnBlur, isOnSubmit, isOnChange } = useRef(modeChecker(mode)).current;\r\n    const validateAllFieldCriteria = validateCriteriaMode === 'all';\r\n    const isWindowUndefined = typeof window === UNDEFINED;\r\n    const shouldValidateSchemaOrResolver = !!(validationSchema || validationResolver);\r\n    const isWeb = typeof document !== UNDEFINED &&\r\n        !isWindowUndefined &&\r\n        !isUndefined(window.HTMLElement);\r\n    const isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\r\n    const readFormStateRef = useRef({\r\n        dirty: !isProxyEnabled,\r\n        dirtyFields: !isProxyEnabled,\r\n        isSubmitted: isOnSubmit,\r\n        submitCount: !isProxyEnabled,\r\n        touched: !isProxyEnabled,\r\n        isSubmitting: !isProxyEnabled,\r\n        isValid: !isProxyEnabled,\r\n    });\r\n    const { isOnBlur: isReValidateOnBlur, isOnSubmit: isReValidateOnSubmit, } = useRef(modeChecker(reValidateMode)).current;\r\n    validationContextRef.current = validationContext;\r\n    const reRender = useCallback(() => {\r\n        if (!isUnMount.current) {\r\n            render({});\r\n        }\r\n    }, []);\r\n    const shouldRenderBaseOnError = useCallback((name, error, shouldRender = false) => {\r\n        let shouldReRender = shouldRender ||\r\n            shouldRenderBasedOnError({\r\n                errors: errorsRef.current,\r\n                error,\r\n                name,\r\n                validFields: validFieldsRef.current,\r\n                fieldsWithValidation: fieldsWithValidationRef.current,\r\n            });\r\n        if (isEmptyObject(error)) {\r\n            if (fieldsWithValidationRef.current.has(name) ||\r\n                shouldValidateSchemaOrResolver) {\r\n                validFieldsRef.current.add(name);\r\n                shouldReRender = shouldReRender || get(errorsRef.current, name);\r\n            }\r\n            errorsRef.current = unset(errorsRef.current, [name]);\r\n        }\r\n        else {\r\n            const previousError = get(errorsRef.current, name);\r\n            validFieldsRef.current.delete(name);\r\n            shouldReRender =\r\n                shouldReRender ||\r\n                    (previousError\r\n                        ? !isSameError(previousError, error[name])\r\n                        : true);\r\n            set(errorsRef.current, name, error[name]);\r\n        }\r\n        if (shouldReRender && !isNullOrUndefined(shouldRender)) {\r\n            reRender();\r\n            return true;\r\n        }\r\n    }, [reRender, shouldValidateSchemaOrResolver]);\r\n    const setFieldValue = useCallback((field, rawValue) => {\r\n        const { ref, options } = field;\r\n        const value = isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\r\n            ? ''\r\n            : rawValue;\r\n        if (isRadioInput(ref) && options) {\r\n            options.forEach(({ ref: radioRef }) => (radioRef.checked = radioRef.value === value));\r\n        }\r\n        else if (isFileInput(ref)) {\r\n            if (isString(value)) {\r\n                ref.value = value;\r\n            }\r\n            else {\r\n                ref.files = value;\r\n            }\r\n        }\r\n        else if (isMultipleSelect(ref)) {\r\n            [...ref.options].forEach((selectRef) => (selectRef.selected = value.includes(selectRef.value)));\r\n        }\r\n        else if (isCheckBoxInput(ref) && options) {\r\n            options.length > 1\r\n                ? options.forEach(({ ref: checkboxRef }) => (checkboxRef.checked = value.includes(checkboxRef.value)))\r\n                : (options[0].ref.checked = !!value);\r\n        }\r\n        else {\r\n            ref.value = value;\r\n        }\r\n    }, [isWeb]);\r\n    const setDirty = useCallback((name) => {\r\n        if (!fieldsRef.current[name] ||\r\n            (!readFormStateRef.current.dirty && !readFormStateRef.current.dirtyFields)) {\r\n            return false;\r\n        }\r\n        let isFieldDirty = defaultValuesAtRenderRef.current[name] !==\r\n            getFieldValue(fieldsRef.current, fieldsRef.current[name].ref);\r\n        const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\r\n        const previousDirtyFieldsLength = dirtyFieldsRef.current.size;\r\n        if (isFieldArray) {\r\n            const fieldArrayName = getFieldArrayParentName(name);\r\n            isFieldDirty = getIsFieldsDifferent(getFieldValueByName(fieldsRef.current, fieldArrayName), get(defaultValuesRef.current, fieldArrayName));\r\n        }\r\n        const isDirtyChanged = (isFieldArray ? isDirtyRef.current : dirtyFieldsRef.current.has(name)) !==\r\n            isFieldDirty;\r\n        if (isFieldDirty) {\r\n            dirtyFieldsRef.current.add(name);\r\n        }\r\n        else {\r\n            dirtyFieldsRef.current.delete(name);\r\n        }\r\n        isDirtyRef.current = isFieldArray\r\n            ? isFieldDirty\r\n            : !!dirtyFieldsRef.current.size;\r\n        return readFormStateRef.current.dirty\r\n            ? isDirtyChanged\r\n            : previousDirtyFieldsLength !== dirtyFieldsRef.current.size;\r\n    }, []);\r\n    const setInternalValues = useCallback((name, value, parentFieldName) => {\r\n        const isValueArray = isArray(value);\r\n        for (const key in value) {\r\n            const fieldName = `${parentFieldName || name}${isValueArray ? `[${key}]` : `.${key}`}`;\r\n            const field = fieldsRef.current[fieldName];\r\n            if (isObject(value[key])) {\r\n                setInternalValues(name, value[key], fieldName);\r\n            }\r\n            if (field) {\r\n                setFieldValue(field, value[key]);\r\n                setDirty(fieldName);\r\n            }\r\n        }\r\n    }, [setFieldValue, setDirty]);\r\n    const setInternalValue = useCallback((name, value) => {\r\n        const field = fieldsRef.current[name];\r\n        if (field) {\r\n            setFieldValue(field, value);\r\n            const output = setDirty(name);\r\n            if (isBoolean(output)) {\r\n                return output;\r\n            }\r\n        }\r\n        else if (!isPrimitive(value)) {\r\n            setInternalValues(name, value);\r\n        }\r\n    }, [setDirty, setFieldValue, setInternalValues]);\r\n    const executeValidation = useCallback(async (name, skipReRender) => {\r\n        const field = fieldsRef.current[name];\r\n        if (field) {\r\n            const error = await validateField(fieldsRef, validateAllFieldCriteria, field);\r\n            shouldRenderBaseOnError(name, error, skipReRender ? null : false);\r\n            return isEmptyObject(error);\r\n        }\r\n        return false;\r\n    }, [shouldRenderBaseOnError, validateAllFieldCriteria]);\r\n    const executeSchemaOrResolverValidation = useCallback(async (payload) => {\r\n        const { errors } = await validateWithSchema(validationSchema, validateAllFieldCriteria, getFieldValueByName(fieldsRef.current), validationResolver, validationContextRef.current);\r\n        const previousFormIsValid = isValidRef.current;\r\n        isValidRef.current = isEmptyObject(errors);\r\n        if (isArray(payload)) {\r\n            payload.forEach((name) => {\r\n                const error = get(errors, name);\r\n                if (error) {\r\n                    set(errorsRef.current, name, error);\r\n                }\r\n                else {\r\n                    unset(errorsRef.current, [name]);\r\n                }\r\n            });\r\n            reRender();\r\n        }\r\n        else {\r\n            const error = get(errors, payload);\r\n            shouldRenderBaseOnError(payload, (error ? { [payload]: error } : {}), previousFormIsValid !== isValidRef.current);\r\n        }\r\n        return isEmptyObject(errorsRef.current);\r\n    }, [\r\n        reRender,\r\n        shouldRenderBaseOnError,\r\n        validateAllFieldCriteria,\r\n        validationResolver,\r\n        validationSchema,\r\n    ]);\r\n    const triggerValidation = useCallback(async (payload) => {\r\n        const fields = payload || Object.keys(fieldsRef.current);\r\n        if (shouldValidateSchemaOrResolver) {\r\n            return executeSchemaOrResolverValidation(fields);\r\n        }\r\n        if (isArray(fields)) {\r\n            const result = await Promise.all(fields.map(async (data) => await executeValidation(data, true)));\r\n            reRender();\r\n            return result.every(Boolean);\r\n        }\r\n        return await executeValidation(fields);\r\n    }, [\r\n        executeSchemaOrResolverValidation,\r\n        executeValidation,\r\n        reRender,\r\n        shouldValidateSchemaOrResolver,\r\n    ]);\r\n    const isFieldWatched = (name) => isWatchAllRef.current ||\r\n        watchFieldsRef.current.has(name) ||\r\n        watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\r\n    function setValue(names, valueOrShouldValidate, shouldValidate) {\r\n        let shouldRender = false;\r\n        const isArrayValue = isArray(names);\r\n        (isArrayValue\r\n            ? names\r\n            : [names]).forEach((name) => {\r\n            const isStringFieldName = isString(name);\r\n            shouldRender =\r\n                setInternalValue(isStringFieldName ? name : Object.keys(name)[0], isStringFieldName\r\n                    ? valueOrShouldValidate\r\n                    : Object.values(name)[0]) || isArrayValue\r\n                    ? true\r\n                    : isFieldWatched(name);\r\n        });\r\n        if (shouldRender || isArrayValue) {\r\n            reRender();\r\n        }\r\n        if (shouldValidate || (isArrayValue && valueOrShouldValidate)) {\r\n            triggerValidation(isArrayValue ? undefined : names);\r\n        }\r\n    }\r\n    handleChangeRef.current = handleChangeRef.current\r\n        ? handleChangeRef.current\r\n        : async ({ type, target }) => {\r\n            const name = target ? target.name : '';\r\n            const fields = fieldsRef.current;\r\n            const errors = errorsRef.current;\r\n            const field = fields[name];\r\n            const currentError = get(errors, name);\r\n            let error;\r\n            if (!field) {\r\n                return;\r\n            }\r\n            const isBlurEvent = type === EVENTS.BLUR;\r\n            const shouldSkipValidation = skipValidation({\r\n                hasError: !!currentError,\r\n                isOnChange,\r\n                isBlurEvent,\r\n                isOnSubmit,\r\n                isReValidateOnSubmit,\r\n                isOnBlur,\r\n                isReValidateOnBlur,\r\n                isSubmitted: isSubmittedRef.current,\r\n            });\r\n            const shouldUpdateDirty = setDirty(name);\r\n            let shouldRender = isFieldWatched(name) || shouldUpdateDirty;\r\n            if (isBlurEvent &&\r\n                !get(touchedFieldsRef.current, name) &&\r\n                readFormStateRef.current.touched) {\r\n                set(touchedFieldsRef.current, name, true);\r\n                shouldRender = true;\r\n            }\r\n            if (shouldSkipValidation) {\r\n                return shouldRender && reRender();\r\n            }\r\n            if (shouldValidateSchemaOrResolver) {\r\n                const { errors } = await validateWithSchema(validationSchema, validateAllFieldCriteria, getFieldValueByName(fields), validationResolver, validationContextRef.current);\r\n                const previousFormIsValid = isValidRef.current;\r\n                isValidRef.current = isEmptyObject(errors);\r\n                error = (get(errors, name)\r\n                    ? { [name]: get(errors, name) }\r\n                    : {});\r\n                if (previousFormIsValid !== isValidRef.current) {\r\n                    shouldRender = true;\r\n                }\r\n            }\r\n            else {\r\n                error = await validateField(fieldsRef, validateAllFieldCriteria, field);\r\n            }\r\n            if (!shouldRenderBaseOnError(name, error) && shouldRender) {\r\n                reRender();\r\n            }\r\n        };\r\n    const validateSchemaOrResolver = useCallback((values = {}) => {\r\n        const fieldValues = isEmptyObject(defaultValuesRef.current)\r\n            ? getFieldsValues(fieldsRef.current)\r\n            : defaultValuesRef.current;\r\n        validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(Object.assign(Object.assign({}, fieldValues), values)), validationResolver, validationContextRef.current).then(({ errors }) => {\r\n            const previousFormIsValid = isValidRef.current;\r\n            isValidRef.current = isEmptyObject(errors);\r\n            if (previousFormIsValid !== isValidRef.current) {\r\n                reRender();\r\n            }\r\n        });\r\n    }, \r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [reRender, validateAllFieldCriteria, validationResolver]);\r\n    const removeFieldEventListener = useCallback((field, forceDelete) => {\r\n        if (handleChangeRef.current && field) {\r\n            findRemovedFieldAndRemoveListener(fieldsRef.current, handleChangeRef.current, field, forceDelete);\r\n        }\r\n    }, []);\r\n    const removeFieldEventListenerAndRef = useCallback((field, forceDelete) => {\r\n        if (!field ||\r\n            (field &&\r\n                isNameInFieldArray(fieldArrayNamesRef.current, field.ref.name) &&\r\n                !forceDelete)) {\r\n            return;\r\n        }\r\n        removeFieldEventListener(field, forceDelete);\r\n        const { name } = field.ref;\r\n        errorsRef.current = unset(errorsRef.current, [name]);\r\n        touchedFieldsRef.current = unset(touchedFieldsRef.current, [name]);\r\n        defaultValuesAtRenderRef.current = unset(defaultValuesAtRenderRef.current, [name]);\r\n        [\r\n            dirtyFieldsRef,\r\n            fieldsWithValidationRef,\r\n            validFieldsRef,\r\n            watchFieldsRef,\r\n        ].forEach((data) => data.current.delete(name));\r\n        if (readFormStateRef.current.isValid ||\r\n            readFormStateRef.current.touched) {\r\n            reRender();\r\n            if (shouldValidateSchemaOrResolver) {\r\n                validateSchemaOrResolver();\r\n            }\r\n        }\r\n    }, [\r\n        reRender,\r\n        shouldValidateSchemaOrResolver,\r\n        validateSchemaOrResolver,\r\n        removeFieldEventListener,\r\n    ]);\r\n    function clearError(name) {\r\n        if (name) {\r\n            unset(errorsRef.current, isArray(name) ? name : [name]);\r\n        }\r\n        else {\r\n            errorsRef.current = {};\r\n        }\r\n        reRender();\r\n    }\r\n    const setInternalError = ({ name, type, types, message, shouldRender, }) => {\r\n        const field = fieldsRef.current[name];\r\n        if (!isSameError(get(errorsRef.current, name), {\r\n            type,\r\n            message,\r\n            types,\r\n        })) {\r\n            set(errorsRef.current, name, {\r\n                type,\r\n                types,\r\n                message,\r\n                ref: field ? field.ref : {},\r\n                isManual: true,\r\n            });\r\n            if (shouldRender) {\r\n                reRender();\r\n            }\r\n        }\r\n    };\r\n    function setError(name, type = '', message) {\r\n        if (isString(name)) {\r\n            setInternalError(Object.assign(Object.assign({ name }, (isObject(type)\r\n                ? {\r\n                    types: type,\r\n                    type: '',\r\n                }\r\n                : {\r\n                    type,\r\n                    message,\r\n                })), { shouldRender: true }));\r\n        }\r\n        else if (isArray(name)) {\r\n            name.forEach((error) => setInternalError(Object.assign({}, error)));\r\n            reRender();\r\n        }\r\n    }\r\n    function watch(fieldNames, defaultValue) {\r\n        const watchFields = watchFieldsRef.current;\r\n        const isDefaultValueUndefined = isUndefined(defaultValue);\r\n        const combinedDefaultValues = isDefaultValueUndefined\r\n            ? defaultValuesRef.current\r\n            : defaultValue;\r\n        const fieldValues = getFieldsValues(fieldsRef.current, fieldNames);\r\n        if (isString(fieldNames)) {\r\n            return assignWatchFields(fieldValues, fieldNames, watchFields, isDefaultValueUndefined\r\n                ? get(combinedDefaultValues, fieldNames)\r\n                : defaultValue, true);\r\n        }\r\n        if (isArray(fieldNames)) {\r\n            return fieldNames.reduce((previous, name) => (Object.assign(Object.assign({}, previous), { [name]: assignWatchFields(fieldValues, name, watchFields, combinedDefaultValues) })), {});\r\n        }\r\n        isWatchAllRef.current = true;\r\n        const result = (!isEmptyObject(fieldValues) && fieldValues) || combinedDefaultValues;\r\n        return fieldNames && fieldNames.nest\r\n            ? transformToNestObject(result)\r\n            : result;\r\n    }\r\n    function unregister(name) {\r\n        if (fieldsRef.current) {\r\n            (isArray(name) ? name : [name]).forEach((fieldName) => removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true));\r\n        }\r\n    }\r\n    function registerFieldsRef(ref, validateOptions = {}) {\r\n        if (!ref.name) {\r\n            // eslint-disable-next-line no-console\r\n            return console.warn('Missing name @', ref);\r\n        }\r\n        const { name, type, value } = ref;\r\n        const fieldRefAndValidationOptions = Object.assign({ ref }, validateOptions);\r\n        const fields = fieldsRef.current;\r\n        const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\r\n        let field = fields[name];\r\n        let isEmptyDefaultValue = true;\r\n        let isFieldArray;\r\n        let defaultValue;\r\n        if (isRadioOrCheckbox\r\n            ? field &&\r\n                isArray(field.options) &&\r\n                field.options.filter(Boolean).find((option) => {\r\n                    return value === option.ref.value && option.ref === ref;\r\n                })\r\n            : field && ref === field.ref) {\r\n            fields[name] = Object.assign(Object.assign({}, field), validateOptions);\r\n            return;\r\n        }\r\n        if (type) {\r\n            const mutationWatcher = onDomRemove(ref, () => removeFieldEventListenerAndRef(field));\r\n            field = isRadioOrCheckbox\r\n                ? Object.assign({ options: [\r\n                        ...((field && field.options) || []),\r\n                        {\r\n                            ref,\r\n                            mutationWatcher,\r\n                        },\r\n                    ], ref: { type, name } }, validateOptions) : Object.assign(Object.assign({}, fieldRefAndValidationOptions), { mutationWatcher });\r\n        }\r\n        else {\r\n            field = fieldRefAndValidationOptions;\r\n        }\r\n        fields[name] = field;\r\n        if (!isEmptyObject(defaultValuesRef.current)) {\r\n            defaultValue = get(defaultValuesRef.current, name);\r\n            isEmptyDefaultValue = isUndefined(defaultValue);\r\n            isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\r\n            if (!isEmptyDefaultValue && !isFieldArray) {\r\n                setFieldValue(field, defaultValue);\r\n            }\r\n        }\r\n        if (shouldValidateSchemaOrResolver &&\r\n            !isFieldArray &&\r\n            readFormStateRef.current.isValid) {\r\n            validateSchemaOrResolver();\r\n        }\r\n        else if (!isEmptyObject(validateOptions)) {\r\n            fieldsWithValidationRef.current.add(name);\r\n            if (!isOnSubmit && readFormStateRef.current.isValid) {\r\n                validateField(fieldsRef, validateAllFieldCriteria, field).then((error) => {\r\n                    const previousFormIsValid = isValidRef.current;\r\n                    isEmptyObject(error)\r\n                        ? validFieldsRef.current.add(name)\r\n                        : (isValidRef.current = false);\r\n                    if (previousFormIsValid !== isValidRef.current) {\r\n                        reRender();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        if (!defaultValuesAtRenderRef.current[name] &&\r\n            !(isFieldArray && isEmptyDefaultValue)) {\r\n            defaultValuesAtRenderRef.current[name] = isEmptyDefaultValue ? getFieldValue(fields, field.ref) : defaultValue;\r\n        }\r\n        if (type) {\r\n            attachEventListeners({\r\n                field: isRadioOrCheckbox && field.options\r\n                    ? field.options[field.options.length - 1]\r\n                    : field,\r\n                isRadioOrCheckbox: isRadioOrCheckbox || isSelectInput(ref),\r\n                handleChange: handleChangeRef.current,\r\n            });\r\n        }\r\n    }\r\n    function register(refOrValidationOptions, validationOptions) {\r\n        if (isWindowUndefined) {\r\n            return;\r\n        }\r\n        if (isString(refOrValidationOptions)) {\r\n            registerFieldsRef({ name: refOrValidationOptions }, validationOptions);\r\n            return;\r\n        }\r\n        if (isObject(refOrValidationOptions) && 'name' in refOrValidationOptions) {\r\n            registerFieldsRef(refOrValidationOptions, validationOptions);\r\n            return;\r\n        }\r\n        return (ref) => ref && registerFieldsRef(ref, refOrValidationOptions);\r\n    }\r\n    const handleSubmit = useCallback((callback) => async (e) => {\r\n        if (e) {\r\n            e.preventDefault();\r\n            e.persist();\r\n        }\r\n        let fieldErrors = {};\r\n        const fields = fieldsRef.current;\r\n        let fieldValues = getFieldsValues(fields);\r\n        if (readFormStateRef.current.isSubmitting) {\r\n            isSubmittingRef.current = true;\r\n            reRender();\r\n        }\r\n        try {\r\n            if (shouldValidateSchemaOrResolver) {\r\n                const { errors, values } = await validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(fieldValues), validationResolver, validationContextRef.current);\r\n                errorsRef.current = errors;\r\n                fieldErrors = errors;\r\n                fieldValues = values;\r\n            }\r\n            else {\r\n                for (const field of Object.values(fields)) {\r\n                    if (field) {\r\n                        const { ref: { name }, } = field;\r\n                        const fieldError = await validateField(fieldsRef, validateAllFieldCriteria, field);\r\n                        if (fieldError[name]) {\r\n                            set(fieldErrors, name, fieldError[name]);\r\n                            validFieldsRef.current.delete(name);\r\n                        }\r\n                        else {\r\n                            if (fieldsWithValidationRef.current.has(name)) {\r\n                                validFieldsRef.current.add(name);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (isEmptyObject(fieldErrors)) {\r\n                errorsRef.current = {};\r\n                reRender();\r\n                await callback(transformToNestObject(fieldValues), e);\r\n            }\r\n            else {\r\n                errorsRef.current = fieldErrors;\r\n                if (submitFocusError && isWeb) {\r\n                    focusOnErrorField(fields, fieldErrors);\r\n                }\r\n            }\r\n        }\r\n        finally {\r\n            isSubmittedRef.current = true;\r\n            isSubmittingRef.current = false;\r\n            submitCountRef.current = submitCountRef.current + 1;\r\n            reRender();\r\n        }\r\n    }, [\r\n        isWeb,\r\n        reRender,\r\n        shouldValidateSchemaOrResolver,\r\n        submitFocusError,\r\n        validateAllFieldCriteria,\r\n        validationResolver,\r\n        validationSchema,\r\n    ]);\r\n    const resetRefs = ({ errors, dirty, isSubmitted, touched, isValid, submitCount, dirtyFields, }) => {\r\n        fieldsRef.current = {};\r\n        if (!errors) {\r\n            errorsRef.current = {};\r\n        }\r\n        if (!touched) {\r\n            touchedFieldsRef.current = {};\r\n        }\r\n        if (!isValid) {\r\n            validFieldsRef.current = new Set();\r\n            fieldsWithValidationRef.current = new Set();\r\n            isValidRef.current = true;\r\n        }\r\n        if (!dirty) {\r\n            isDirtyRef.current = false;\r\n        }\r\n        if (!dirtyFields) {\r\n            dirtyFieldsRef.current = new Set();\r\n        }\r\n        if (!isSubmitted) {\r\n            isSubmittedRef.current = false;\r\n        }\r\n        if (!submitCount) {\r\n            submitCountRef.current = 0;\r\n        }\r\n        defaultValuesAtRenderRef.current = {};\r\n        fieldArrayDefaultValues.current = {};\r\n        watchFieldsRef.current = new Set();\r\n        isWatchAllRef.current = false;\r\n    };\r\n    const reset = (values, omitResetState = {}) => {\r\n        if (isWeb) {\r\n            for (const field of Object.values(fieldsRef.current)) {\r\n                if (field) {\r\n                    const { ref, options } = field;\r\n                    const inputRef = isRadioOrCheckboxFunction(ref) && isArray(options)\r\n                        ? options[0].ref\r\n                        : ref;\r\n                    if (isHTMLElement(inputRef)) {\r\n                        try {\r\n                            inputRef.closest('form').reset();\r\n                            break;\r\n                        }\r\n                        catch (_a) { }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (values) {\r\n            defaultValuesRef.current = values;\r\n        }\r\n        Object.values(resetFieldArrayFunctionRef.current).forEach((resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray());\r\n        resetRefs(omitResetState);\r\n        reRender();\r\n    };\r\n    function getValues(payload) {\r\n        if (isString(payload)) {\r\n            return fieldsRef.current[payload]\r\n                ? getFieldValue(fieldsRef.current, fieldsRef.current[payload].ref)\r\n                : get(defaultValuesRef.current, payload);\r\n        }\r\n        const fieldValues = getFieldsValues(fieldsRef.current);\r\n        const outputValues = isEmptyObject(fieldValues)\r\n            ? defaultValuesRef.current\r\n            : fieldValues;\r\n        return payload && payload.nest\r\n            ? transformToNestObject(outputValues)\r\n            : outputValues;\r\n    }\r\n    useEffect(() => () => {\r\n        isUnMount.current = true;\r\n        fieldsRef.current &&\r\n            process.env.NODE_ENV === 'production' &&\r\n            Object.values(fieldsRef.current).forEach((field) => removeFieldEventListenerAndRef(field, true));\r\n    }, [removeFieldEventListenerAndRef]);\r\n    if (!shouldValidateSchemaOrResolver) {\r\n        isValidRef.current =\r\n            validFieldsRef.current.size >= fieldsWithValidationRef.current.size &&\r\n                isEmptyObject(errorsRef.current);\r\n    }\r\n    const formState = {\r\n        dirty: isDirtyRef.current,\r\n        dirtyFields: dirtyFieldsRef.current,\r\n        isSubmitted: isSubmittedRef.current,\r\n        submitCount: submitCountRef.current,\r\n        touched: touchedFieldsRef.current,\r\n        isSubmitting: isSubmittingRef.current,\r\n        isValid: isOnSubmit\r\n            ? isSubmittedRef.current && isEmptyObject(errorsRef.current)\r\n            : isValidRef.current,\r\n    };\r\n    const commonProps = {\r\n        triggerValidation,\r\n        setValue: useCallback(setValue, [\r\n            reRender,\r\n            setInternalValue,\r\n            triggerValidation,\r\n        ]),\r\n        register: useCallback(register, [\r\n            defaultValuesRef.current,\r\n            defaultValuesAtRenderRef.current,\r\n        ]),\r\n        unregister: useCallback(unregister, []),\r\n        getValues: useCallback(getValues, []),\r\n        formState: isProxyEnabled\r\n            ? new Proxy(formState, {\r\n                get: (obj, prop) => {\r\n                    if (prop in obj) {\r\n                        readFormStateRef.current[prop] = true;\r\n                        return obj[prop];\r\n                    }\r\n                    return undefined;\r\n                },\r\n            })\r\n            : formState,\r\n    };\r\n    const control = Object.assign(Object.assign(Object.assign({ removeFieldEventListener,\r\n        reRender }, (shouldValidateSchemaOrResolver\r\n        ? { validateSchemaIsValid: validateSchemaOrResolver }\r\n        : {})), { mode: {\r\n            isOnBlur,\r\n            isOnSubmit,\r\n            isOnChange,\r\n        }, reValidateMode: {\r\n            isReValidateOnBlur,\r\n            isReValidateOnSubmit,\r\n        }, errorsRef,\r\n        touchedFieldsRef,\r\n        fieldsRef,\r\n        isWatchAllRef,\r\n        watchFieldsRef,\r\n        resetFieldArrayFunctionRef,\r\n        fieldArrayDefaultValues,\r\n        validFieldsRef,\r\n        dirtyFieldsRef,\r\n        fieldsWithValidationRef,\r\n        fieldArrayNamesRef,\r\n        isDirtyRef,\r\n        readFormStateRef,\r\n        defaultValuesRef }), commonProps);\r\n    return Object.assign({ watch,\r\n        control,\r\n        handleSubmit, reset: useCallback(reset, []), clearError: useCallback(clearError, []), setError: useCallback(setError, []), errors: errorsRef.current }, commonProps);\r\n}\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\n\nconst FormGlobalContext = createContext(null);\r\nfunction useFormContext() {\r\n    return useContext(FormGlobalContext);\r\n}\r\nfunction FormContext(_a) {\r\n    var { children, formState, errors } = _a, restMethods = __rest(_a, [\"children\", \"formState\", \"errors\"]);\r\n    return (createElement(FormGlobalContext.Provider, { value: Object.assign(Object.assign({}, restMethods), { formState, errors }) }, children));\r\n}\n\nvar generateId = () => {\r\n    const d = typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n        const r = (Math.random() * 16 + d) % 16 | 0;\r\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n    });\r\n};\n\nconst appendId = (value, keyName) => (Object.assign({ [keyName]: generateId() }, (isObject(value) ? value : { value })));\r\nconst mapIds = (data, keyName) => (isArray(data) ? data : []).map((value) => appendId(value, keyName));\n\nvar getSortRemovedItems = (indexes, removeIndexes, updatedIndexes = [], count = 0, notFoundIndexes = []) => {\r\n    for (const removeIndex of removeIndexes) {\r\n        if (indexes.indexOf(removeIndex) < 0) {\r\n            notFoundIndexes.push(removeIndex);\r\n        }\r\n    }\r\n    for (const index of indexes.sort()) {\r\n        if (removeIndexes.indexOf(index) > -1) {\r\n            updatedIndexes.push(-1);\r\n            count++;\r\n        }\r\n        else {\r\n            updatedIndexes.push(index -\r\n                count -\r\n                (notFoundIndexes.length\r\n                    ? notFoundIndexes\r\n                        .map((notFoundIndex) => notFoundIndex < index)\r\n                        .filter(Boolean).length\r\n                    : 0));\r\n        }\r\n    }\r\n    return updatedIndexes;\r\n};\n\nconst removeAt = (data, index) => [\r\n    ...data.slice(0, index),\r\n    ...data.slice(index + 1),\r\n];\r\nfunction removeAtIndexes(data, index) {\r\n    let k = -1;\r\n    while (++k < data.length) {\r\n        if (index.indexOf(k) >= 0) {\r\n            delete data[k];\r\n        }\r\n    }\r\n    return data.filter(Boolean);\r\n}\r\nvar removeArrayAt = (data, index) => isUndefined(index)\r\n    ? []\r\n    : isArray(index)\r\n        ? removeAtIndexes(data, index)\r\n        : removeAt(data, index);\n\nvar moveArrayAt = (data, from, to) => isArray(data) ? data.splice(to, 0, data.splice(from, 1)[0]) : [];\n\nvar swapArrayAt = (data, indexA, indexB) => {\r\n    const temp = [data[indexB], data[indexA]];\r\n    data[indexA] = temp[0];\r\n    data[indexB] = temp[1];\r\n};\n\nfunction prepend(data, value) {\r\n    return [...(isArray(value) ? value : [value || null]), ...data];\r\n}\n\nfunction insert(data, index, value) {\r\n    return [\r\n        ...data.slice(0, index),\r\n        ...(isArray(value) ? value : [value || null]),\r\n        ...data.slice(index),\r\n    ];\r\n}\n\nvar fillEmptyArray = (value) => isArray(value) ? Array(value.length).fill(null) : null;\n\nconst useFieldArray = ({ control, name, keyName = 'id', }) => {\r\n    const methods = useFormContext();\r\n    const { isWatchAllRef, resetFieldArrayFunctionRef, fieldArrayNamesRef, reRender, fieldsRef, getValues, defaultValuesRef, removeFieldEventListener, errorsRef, dirtyFieldsRef, isDirtyRef, touchedFieldsRef, readFormStateRef, watchFieldsRef, validFieldsRef, fieldsWithValidationRef, fieldArrayDefaultValues, validateSchemaIsValid, } = control || methods.control;\r\n    const getDefaultValues = () => [\r\n        ...get(fieldArrayDefaultValues.current[getFieldArrayParentName(name)]\r\n            ? fieldArrayDefaultValues.current\r\n            : defaultValuesRef.current, name, []),\r\n    ];\r\n    const memoizedDefaultValues = useRef(getDefaultValues());\r\n    const [fields, setField] = useState(mapIds(memoizedDefaultValues.current, keyName));\r\n    const [isDeleted, setIsDeleted] = useState(false);\r\n    const allFields = useRef(fields);\r\n    const isNameKey = isKey(name);\r\n    allFields.current = fields;\r\n    if (isNameKey) {\r\n        fieldArrayDefaultValues.current[name] = memoizedDefaultValues.current;\r\n    }\r\n    const appendValueWithKey = (values) => values.map((value) => appendId(value, keyName));\r\n    const setFieldAndValidState = (fieldsValues) => {\r\n        setField(fieldsValues);\r\n        if (readFormStateRef.current.isValid && validateSchemaIsValid) {\r\n            validateSchemaIsValid({\r\n                [name]: fieldsValues,\r\n            });\r\n        }\r\n    };\r\n    const modifyDirtyFields = ({ shouldRender, isRemove, isPrePend, index, value = {}, } = {}) => {\r\n        let render = shouldRender;\r\n        const values = isArray(value) ? value : [value];\r\n        if (readFormStateRef.current.dirty) {\r\n            const dirtyFieldIndexesAndValues = {};\r\n            if (isPrePend || isRemove) {\r\n                for (const dirtyField of [...dirtyFieldsRef.current].sort()) {\r\n                    if (isMatchFieldArrayName(dirtyField, name)) {\r\n                        const matchedIndexes = dirtyField.match(REGEX_ARRAY_FIELD_INDEX);\r\n                        if (matchedIndexes) {\r\n                            const matchIndex = +matchedIndexes[matchedIndexes.length - 1];\r\n                            if (dirtyFieldIndexesAndValues[matchIndex]) {\r\n                                dirtyFieldIndexesAndValues[matchIndex].push(dirtyField);\r\n                            }\r\n                            else {\r\n                                dirtyFieldIndexesAndValues[matchIndex] = [dirtyField];\r\n                            }\r\n                        }\r\n                        dirtyFieldsRef.current.delete(dirtyField);\r\n                    }\r\n                }\r\n            }\r\n            if (!isUndefined(index) || isPrePend) {\r\n                const updatedDirtyFieldIndexes = isUndefined(index)\r\n                    ? []\r\n                    : getSortRemovedItems(Object.keys(dirtyFieldIndexesAndValues).map((i) => +i), isArray(index) ? index : [index]);\r\n                Object.values(dirtyFieldIndexesAndValues).forEach((values, index) => {\r\n                    const updateIndex = isPrePend ? 0 : updatedDirtyFieldIndexes[index];\r\n                    if (updateIndex > -1) {\r\n                        for (const value of values) {\r\n                            const matchedIndexes = value.match(REGEX_ARRAY_FIELD_INDEX);\r\n                            if (matchedIndexes) {\r\n                                dirtyFieldsRef.current.add(value.replace(/[\\d+]([^[\\d+]+)$/, `${isPrePend\r\n                                    ? +matchedIndexes[matchedIndexes.length - 1] +\r\n                                        values.length\r\n                                    : updateIndex}$1`));\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            if (!isRemove) {\r\n                values.forEach((fieldValue, index) => Object.keys(fieldValue).forEach((key) => dirtyFieldsRef.current.add(`${name}[${isPrePend ? index : allFields.current.length + index}].${key}`)));\r\n                isDirtyRef.current = true;\r\n            }\r\n            render = true;\r\n        }\r\n        if (render && !isWatchAllRef.current) {\r\n            reRender();\r\n        }\r\n    };\r\n    const resetFields = (flagOrFields) => {\r\n        if (readFormStateRef.current.dirty) {\r\n            isDirtyRef.current = isUndefined(flagOrFields)\r\n                ? true\r\n                : getIsFieldsDifferent(flagOrFields, defaultValuesRef.current[name] || []);\r\n        }\r\n        for (const key in fieldsRef.current) {\r\n            if (isMatchFieldArrayName(key, name) && fieldsRef.current[key]) {\r\n                removeFieldEventListener(fieldsRef.current[key], true);\r\n            }\r\n        }\r\n    };\r\n    const mapCurrentFieldsValueWithState = () => {\r\n        const currentFieldsValue = get(getValues({ nest: true }), name);\r\n        if (isArray(currentFieldsValue)) {\r\n            for (let i = 0; i < currentFieldsValue.length; i++) {\r\n                allFields.current[i] = Object.assign(Object.assign({}, allFields.current[i]), currentFieldsValue[i]);\r\n            }\r\n        }\r\n    };\r\n    const append = (value) => {\r\n        setFieldAndValidState([\r\n            ...allFields.current,\r\n            ...(isArray(value)\r\n                ? appendValueWithKey(value)\r\n                : [appendId(value, keyName)]),\r\n        ]);\r\n        modifyDirtyFields({ value });\r\n    };\r\n    const prepend$1 = (value) => {\r\n        let shouldRender = false;\r\n        resetFields();\r\n        setFieldAndValidState(prepend(allFields.current, isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)]));\r\n        if (errorsRef.current[name]) {\r\n            errorsRef.current[name] = prepend(errorsRef.current[name], fillEmptyArray(value));\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            touchedFieldsRef.current[name] = prepend(touchedFieldsRef.current[name], fillEmptyArray(value));\r\n            shouldRender = true;\r\n        }\r\n        modifyDirtyFields({\r\n            shouldRender,\r\n            isPrePend: true,\r\n            value,\r\n        });\r\n    };\r\n    const remove = (index) => {\r\n        let shouldRender = false;\r\n        const isIndexUndefined = isUndefined(index);\r\n        if (!isIndexUndefined) {\r\n            mapCurrentFieldsValueWithState();\r\n        }\r\n        resetFields(removeArrayAt(getFieldValueByName(fieldsRef.current, name), index));\r\n        setFieldAndValidState(removeArrayAt(allFields.current, index));\r\n        setIsDeleted(true);\r\n        if (errorsRef.current[name]) {\r\n            errorsRef.current[name] = removeArrayAt(errorsRef.current[name], index);\r\n            if (!errorsRef.current[name].filter(Boolean).length) {\r\n                delete errorsRef.current[name];\r\n            }\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            touchedFieldsRef.current[name] = removeArrayAt(touchedFieldsRef.current[name], index);\r\n            shouldRender = true;\r\n        }\r\n        if (readFormStateRef.current.isValid && !validateSchemaIsValid) {\r\n            let fieldIndex = -1;\r\n            let isFound = false;\r\n            const isIndexUndefined = isUndefined(index);\r\n            while (fieldIndex++ < fields.length) {\r\n                const isLast = fieldIndex === fields.length - 1;\r\n                const isCurrentIndex = (isArray(index) ? index : [index]).indexOf(fieldIndex) >= 0;\r\n                if (isCurrentIndex || isIndexUndefined) {\r\n                    isFound = true;\r\n                }\r\n                if (!isFound) {\r\n                    continue;\r\n                }\r\n                for (const key in fields[fieldIndex]) {\r\n                    const currentFieldName = `${name}[${fieldIndex}].${key}`;\r\n                    if (isCurrentIndex || isLast || isIndexUndefined) {\r\n                        validFieldsRef.current.delete(currentFieldName);\r\n                        fieldsWithValidationRef.current.delete(currentFieldName);\r\n                    }\r\n                    else {\r\n                        const previousFieldName = `${name}[${fieldIndex - 1}].${key}`;\r\n                        if (validFieldsRef.current.has(currentFieldName)) {\r\n                            validFieldsRef.current.add(previousFieldName);\r\n                        }\r\n                        if (fieldsWithValidationRef.current.has(currentFieldName)) {\r\n                            fieldsWithValidationRef.current.add(previousFieldName);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        modifyDirtyFields({\r\n            shouldRender,\r\n            isRemove: true,\r\n            index,\r\n        });\r\n    };\r\n    const insert$1 = (index, value) => {\r\n        mapCurrentFieldsValueWithState();\r\n        resetFields(insert(getFieldValueByName(fieldsRef.current, name), index));\r\n        setFieldAndValidState(insert(allFields.current, index, isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)]));\r\n        if (errorsRef.current[name]) {\r\n            errorsRef.current[name] = insert(errorsRef.current[name], index, fillEmptyArray(value));\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            touchedFieldsRef.current[name] = insert(touchedFieldsRef.current[name], index, fillEmptyArray(value));\r\n            reRender();\r\n        }\r\n    };\r\n    const swap = (indexA, indexB) => {\r\n        mapCurrentFieldsValueWithState();\r\n        const fieldValues = getFieldValueByName(fieldsRef.current, name);\r\n        swapArrayAt(fieldValues, indexA, indexB);\r\n        resetFields(fieldValues);\r\n        swapArrayAt(allFields.current, indexA, indexB);\r\n        setFieldAndValidState([...allFields.current]);\r\n        if (errorsRef.current[name]) {\r\n            swapArrayAt(errorsRef.current[name], indexA, indexB);\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            swapArrayAt(touchedFieldsRef.current[name], indexA, indexB);\r\n            reRender();\r\n        }\r\n    };\r\n    const move = (from, to) => {\r\n        mapCurrentFieldsValueWithState();\r\n        const fieldValues = getFieldValueByName(fieldsRef.current, name);\r\n        moveArrayAt(fieldValues, from, to);\r\n        resetFields(fieldValues);\r\n        moveArrayAt(allFields.current, from, to);\r\n        setFieldAndValidState([...allFields.current]);\r\n        if (errorsRef.current[name]) {\r\n            moveArrayAt(errorsRef.current[name], from, to);\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            moveArrayAt(touchedFieldsRef.current[name], from, to);\r\n            reRender();\r\n        }\r\n    };\r\n    const reset = () => {\r\n        resetFields();\r\n        memoizedDefaultValues.current = getDefaultValues();\r\n        setField(mapIds(memoizedDefaultValues.current, keyName));\r\n    };\r\n    useEffect(() => {\r\n        if (isNameKey &&\r\n            isDeleted &&\r\n            fieldArrayDefaultValues.current[name] &&\r\n            fields.length < fieldArrayDefaultValues.current[name].length) {\r\n            fieldArrayDefaultValues.current[name].pop();\r\n        }\r\n    }, [fields, name, fieldArrayDefaultValues, isDeleted, isNameKey]);\r\n    useEffect(() => {\r\n        if (isWatchAllRef && isWatchAllRef.current) {\r\n            reRender();\r\n        }\r\n        else if (watchFieldsRef) {\r\n            for (const watchField of watchFieldsRef.current) {\r\n                if (watchField.startsWith(name)) {\r\n                    reRender();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }, [fields, name, reRender, watchFieldsRef, isWatchAllRef]);\r\n    useEffect(() => {\r\n        const resetFunctions = resetFieldArrayFunctionRef.current;\r\n        const fieldArrayNames = fieldArrayNamesRef.current;\r\n        fieldArrayNames.add(name);\r\n        resetFunctions[name] = reset;\r\n        return () => {\r\n            resetFields();\r\n            delete resetFunctions[name];\r\n            fieldArrayNames.delete(name);\r\n        };\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n    return {\r\n        swap: useCallback(swap, [name]),\r\n        move: useCallback(move, [name]),\r\n        prepend: useCallback(prepend$1, [name]),\r\n        append: useCallback(append, [name]),\r\n        remove: useCallback(remove, [fields, name]),\r\n        insert: useCallback(insert$1, [name]),\r\n        fields,\r\n    };\r\n};\n\nvar getInputValue = (event, isCheckboxInput) => isPrimitive(event) ||\r\n    !isObject(event.target) ||\r\n    (isObject(event.target) && !event.type)\r\n    ? event\r\n    : isCheckboxInput || isUndefined(event.target.value)\r\n        ? event.target.checked\r\n        : event.target.value;\n\nconst Controller = (_a) => {\r\n    var { name, rules, as: InnerComponent, onBlur, onChange, onChangeName = VALIDATION_MODE.onChange, onBlurName = VALIDATION_MODE.onBlur, valueName, defaultValue, control, onFocus } = _a, rest = __rest(_a, [\"name\", \"rules\", \"as\", \"onBlur\", \"onChange\", \"onChangeName\", \"onBlurName\", \"valueName\", \"defaultValue\", \"control\", \"onFocus\"]);\r\n    const methods = useFormContext();\r\n    const { defaultValuesRef, setValue, register, unregister, errorsRef, removeFieldEventListener, triggerValidation, mode: { isOnSubmit, isOnBlur, isOnChange }, reValidateMode: { isReValidateOnBlur, isReValidateOnSubmit }, formState: { isSubmitted }, touchedFieldsRef, readFormStateRef, reRender, fieldsRef, fieldArrayNamesRef, } = control || methods.control;\r\n    const [value, setInputStateValue] = useState(isUndefined(defaultValue)\r\n        ? get(defaultValuesRef.current, name)\r\n        : defaultValue);\r\n    const valueRef = useRef(value);\r\n    const isCheckboxInput = isBoolean(value);\r\n    const shouldReValidateOnBlur = isOnBlur || isReValidateOnBlur;\r\n    const rulesRef = useRef(rules);\r\n    const onFocusRef = useRef(onFocus);\r\n    const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\r\n    rulesRef.current = rules;\r\n    const shouldValidate = () => !skipValidation({\r\n        hasError: !!get(errorsRef.current, name),\r\n        isOnBlur,\r\n        isOnSubmit,\r\n        isOnChange,\r\n        isReValidateOnBlur,\r\n        isReValidateOnSubmit,\r\n        isSubmitted,\r\n    });\r\n    const commonTask = (event) => {\r\n        const data = getInputValue(event, isCheckboxInput);\r\n        setInputStateValue(data);\r\n        valueRef.current = data;\r\n        return data;\r\n    };\r\n    const eventWrapper = (event) => (...arg) => setValue(name, commonTask(event(arg)), shouldValidate());\r\n    const handleChange = (event) => {\r\n        const data = commonTask(event);\r\n        setValue(name, data, shouldValidate());\r\n    };\r\n    const registerField = useCallback(() => {\r\n        if (!isNotFieldArray) {\r\n            removeFieldEventListener(fieldsRef.current[name], true);\r\n        }\r\n        register(Object.defineProperty({ name, focus: onFocusRef.current }, VALUE, {\r\n            set(data) {\r\n                setInputStateValue(data);\r\n                valueRef.current = data;\r\n            },\r\n            get() {\r\n                return valueRef.current;\r\n            },\r\n        }), rulesRef.current);\r\n    }, [\r\n        isNotFieldArray,\r\n        fieldsRef,\r\n        rulesRef,\r\n        name,\r\n        onFocusRef,\r\n        register,\r\n        removeFieldEventListener,\r\n    ]);\r\n    useEffect(() => () => {\r\n        !isNameInFieldArray(fieldArrayNamesRef.current, name) && unregister(name);\r\n    }, [unregister, name, fieldArrayNamesRef]);\r\n    useEffect(() => {\r\n        registerField();\r\n    }, [registerField]);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    useEffect(() => {\r\n        if (!fieldsRef.current[name]) {\r\n            registerField();\r\n            if (isNotFieldArray) {\r\n                setInputStateValue(isUndefined(defaultValue)\r\n                    ? get(defaultValuesRef.current, name)\r\n                    : defaultValue);\r\n            }\r\n        }\r\n    });\r\n    const props = Object.assign(Object.assign(Object.assign(Object.assign({ name }, rest), (onChange\r\n        ? { [onChangeName]: eventWrapper(onChange) }\r\n        : { [onChangeName]: handleChange })), { [onBlurName]: (...args) => {\r\n            if (onBlur) {\r\n                onBlur(args);\r\n            }\r\n            if (readFormStateRef.current.touched &&\r\n                !get(touchedFieldsRef.current, name)) {\r\n                set(touchedFieldsRef.current, name, true);\r\n                reRender();\r\n            }\r\n            if (shouldReValidateOnBlur) {\r\n                triggerValidation(name);\r\n            }\r\n        } }), { [valueName || (isCheckboxInput ? 'checked' : VALUE)]: value });\r\n    return isValidElement(InnerComponent)\r\n        ? cloneElement(InnerComponent, props)\r\n        : createElement(InnerComponent, props);\r\n};\n\nconst ErrorMessage = (_a) => {\r\n    var { as: InnerComponent, errors, name, message, children } = _a, rest = __rest(_a, [\"as\", \"errors\", \"name\", \"message\", \"children\"]);\r\n    const methods = useFormContext();\r\n    const error = get(errors || methods.errors, name);\r\n    if (!error) {\r\n        return null;\r\n    }\r\n    const { message: messageFromRegister, types } = error;\r\n    const props = Object.assign(Object.assign({}, (InnerComponent ? rest : {})), { children: children\r\n            ? children({ message: messageFromRegister || message, messages: types })\r\n            : messageFromRegister || message });\r\n    return InnerComponent ? (isValidElement(InnerComponent) ? (cloneElement(InnerComponent, props)) : (createElement(InnerComponent, props))) : (createElement(Fragment, Object.assign({}, props)));\r\n};\n\nexport { Controller, ErrorMessage, FormContext, useFieldArray, useForm, useFormContext };\n"],"sourceRoot":""}